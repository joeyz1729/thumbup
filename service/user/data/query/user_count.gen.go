// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"thumbup/service/user/data/model"
)

func newUserCount(db *gorm.DB, opts ...gen.DOOption) userCount {
	_userCount := userCount{}

	_userCount.userCountDo.UseDB(db, opts...)
	_userCount.userCountDo.UseModel(&model.UserCount{})

	tableName := _userCount.userCountDo.TableName()
	_userCount.ALL = field.NewAsterisk(tableName)
	_userCount.ID = field.NewInt64(tableName, "id")
	_userCount.UserID = field.NewInt64(tableName, "user_id")
	_userCount.TotalFavorited = field.NewInt64(tableName, "total_favorited")
	_userCount.WorkCount = field.NewInt64(tableName, "work_count")
	_userCount.FavoriteCount = field.NewInt64(tableName, "favorite_count")
	_userCount.CreateTime = field.NewTime(tableName, "create_time")
	_userCount.UpdateTime = field.NewTime(tableName, "update_time")

	_userCount.fillFieldMap()

	return _userCount
}

type userCount struct {
	userCountDo userCountDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.Int64
	TotalFavorited field.Int64
	WorkCount      field.Int64
	FavoriteCount  field.Int64
	CreateTime     field.Time
	UpdateTime     field.Time

	fieldMap map[string]field.Expr
}

func (u userCount) Table(newTableName string) *userCount {
	u.userCountDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCount) As(alias string) *userCount {
	u.userCountDo.DO = *(u.userCountDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCount) updateTableName(table string) *userCount {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.TotalFavorited = field.NewInt64(table, "total_favorited")
	u.WorkCount = field.NewInt64(table, "work_count")
	u.FavoriteCount = field.NewInt64(table, "favorite_count")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userCount) WithContext(ctx context.Context) IUserCountDo {
	return u.userCountDo.WithContext(ctx)
}

func (u userCount) TableName() string { return u.userCountDo.TableName() }

func (u userCount) Alias() string { return u.userCountDo.Alias() }

func (u userCount) Columns(cols ...field.Expr) gen.Columns { return u.userCountDo.Columns(cols...) }

func (u *userCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCount) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["total_favorited"] = u.TotalFavorited
	u.fieldMap["work_count"] = u.WorkCount
	u.fieldMap["favorite_count"] = u.FavoriteCount
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userCount) clone(db *gorm.DB) userCount {
	u.userCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCount) replaceDB(db *gorm.DB) userCount {
	u.userCountDo.ReplaceDB(db)
	return u
}

type userCountDo struct{ gen.DO }

type IUserCountDo interface {
	gen.SubQuery
	Debug() IUserCountDo
	WithContext(ctx context.Context) IUserCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCountDo
	WriteDB() IUserCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCountDo
	Not(conds ...gen.Condition) IUserCountDo
	Or(conds ...gen.Condition) IUserCountDo
	Select(conds ...field.Expr) IUserCountDo
	Where(conds ...gen.Condition) IUserCountDo
	Order(conds ...field.Expr) IUserCountDo
	Distinct(cols ...field.Expr) IUserCountDo
	Omit(cols ...field.Expr) IUserCountDo
	Join(table schema.Tabler, on ...field.Expr) IUserCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCountDo
	Group(cols ...field.Expr) IUserCountDo
	Having(conds ...gen.Condition) IUserCountDo
	Limit(limit int) IUserCountDo
	Offset(offset int) IUserCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCountDo
	Unscoped() IUserCountDo
	Create(values ...*model.UserCount) error
	CreateInBatches(values []*model.UserCount, batchSize int) error
	Save(values ...*model.UserCount) error
	First() (*model.UserCount, error)
	Take() (*model.UserCount, error)
	Last() (*model.UserCount, error)
	Find() ([]*model.UserCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCount, err error)
	FindInBatches(result *[]*model.UserCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCountDo
	Assign(attrs ...field.AssignExpr) IUserCountDo
	Joins(fields ...field.RelationField) IUserCountDo
	Preload(fields ...field.RelationField) IUserCountDo
	FirstOrInit() (*model.UserCount, error)
	FirstOrCreate() (*model.UserCount, error)
	FindByPage(offset int, limit int) (result []*model.UserCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCountDo) Debug() IUserCountDo {
	return u.withDO(u.DO.Debug())
}

func (u userCountDo) WithContext(ctx context.Context) IUserCountDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCountDo) ReadDB() IUserCountDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCountDo) WriteDB() IUserCountDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCountDo) Session(config *gorm.Session) IUserCountDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCountDo) Clauses(conds ...clause.Expression) IUserCountDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCountDo) Returning(value interface{}, columns ...string) IUserCountDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCountDo) Not(conds ...gen.Condition) IUserCountDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCountDo) Or(conds ...gen.Condition) IUserCountDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCountDo) Select(conds ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCountDo) Where(conds ...gen.Condition) IUserCountDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCountDo) Order(conds ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCountDo) Distinct(cols ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCountDo) Omit(cols ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCountDo) Join(table schema.Tabler, on ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCountDo) Group(cols ...field.Expr) IUserCountDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCountDo) Having(conds ...gen.Condition) IUserCountDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCountDo) Limit(limit int) IUserCountDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCountDo) Offset(offset int) IUserCountDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCountDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCountDo) Unscoped() IUserCountDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCountDo) Create(values ...*model.UserCount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCountDo) CreateInBatches(values []*model.UserCount, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCountDo) Save(values ...*model.UserCount) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCountDo) First() (*model.UserCount, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCount), nil
	}
}

func (u userCountDo) Take() (*model.UserCount, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCount), nil
	}
}

func (u userCountDo) Last() (*model.UserCount, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCount), nil
	}
}

func (u userCountDo) Find() ([]*model.UserCount, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCount), err
}

func (u userCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCount, err error) {
	buf := make([]*model.UserCount, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCountDo) FindInBatches(result *[]*model.UserCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCountDo) Attrs(attrs ...field.AssignExpr) IUserCountDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCountDo) Assign(attrs ...field.AssignExpr) IUserCountDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCountDo) Joins(fields ...field.RelationField) IUserCountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCountDo) Preload(fields ...field.RelationField) IUserCountDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCountDo) FirstOrInit() (*model.UserCount, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCount), nil
	}
}

func (u userCountDo) FirstOrCreate() (*model.UserCount, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCount), nil
	}
}

func (u userCountDo) FindByPage(offset int, limit int) (result []*model.UserCount, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCountDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCountDo) Delete(models ...*model.UserCount) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCountDo) withDO(do gen.Dao) *userCountDo {
	u.DO = *do.(*gen.DO)
	return u
}
